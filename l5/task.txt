Операционные системы и среды 
Л.р.6. Управление потоками, средства синхронизации. 
Цель: 
Изучение подсистемы потоков (pthread), основных особенностей 
функционирования и управления, средств взаимодействия потоков. 
Практическое проектирование, реализация и отладка программ с 
параллельными взаимодействующими (конкурирующими) потоками. 
Теоретическая и методическая часть 
Вычислительные потоки в Unix (Linux), соотношение процессов и потоков. 
Потоки pthread  
Порождение потоков: pthread_create(). Функция потока. Виды потоков 
(joinable и detach) и их атрибуты. 
Завершение потоков: pthread_exit() и pthread_cancel(). «Точки принуди-
тельного завершения» (cancelation points), поведение при принудительном 
завершения.  
Мьютексы pthread_mutex) – типы мьютексов, особенности поведения, API 
мьютексов. 
Барьеры pthread_barrier – особенности поведения, API барьеров. 
Спин-блокировки pthread_spinlock – особенности поведения и применения, 
API спин-блокировок. 
«Быстрые мьютексы» futex – виды, особенности, API «быстрых 
мьютексов» 
Практическая часть 
Общая постановка задачи: 
Написать программу (программы) в соответствии с вариантом задания. 
Спланировать и обеспечить тестирование (демонстрацию) выполнения – 
для нескольких взаимодействующих потоков это может быть существенно 
более сложно и трудоемко. 
Желательно продолжать использовать make (и сценарии makefile) для 
управления обработкой проекта. 
Многие из вариантов имеют сходство с заданиями по дисциплине СП.

Варианты:
1 Многопоточная сортировка 
Многопоточная программа, реализующая обработку достаточно большого 
массива данных, например его сортировку (алгоритм обработки должен 
допускать эффективное распараллеливание). 
Типовые стадии обработки (на примере сортировки): 
– разбиение массива на несколько частей (фрагментов) 
– сортировка каждого фрагмента отдельным потоком 
– окончательная «сборка». 
Количество потоков (в т.ч. единственный) и размер массива задаются 
пользователем. Количество потоков выбирается не слишком большое, 
чтобы оставалось удобным для отображения и не провоцировало 
перегрузку системы. 
Результат – сведения о времени выполнения для конкретной 
конфигурации, минимальный протокол выполнения. 
2 Многопоточная работа с файлом 
В целом аналогично предыдущему варианту, но для операций ввода-
вывода (дисковый файл, открытый для разделяемого доступа). 
Сравнение с обычной (последовательной) реализацией при тех же 
количествах операций и объемах передаваемых данных.